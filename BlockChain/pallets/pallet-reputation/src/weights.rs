//! Autogenerated weights for pallet_reputation
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-01 (placeholder), STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/node-template benchmark pallet
// --chain dev
// --execution wasm
// --wasm-execution compiled
// --pallet pallet_reputation
// --extrinsic "*"
// --steps 50
// --repeat 20
// --output pallets/reputation/src/weights.rs
// --template ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_reputation.
pub trait WeightInfo {
    fn update_reputation() -> Weight;
    fn reset_reputation() -> Weight;
    fn initialize_reputation() -> Weight;
}

/// Weights for pallet_reputation using the Substrate node and recommended hardware.
/// Placeholder values - these should be generated by benchmarking.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    // Storage: Reputation ReputationScoresMap (r:1 w:1)
    fn update_reputation() -> Weight {
        (15_000_000 as Weight) // Placeholder
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    // Storage: Reputation ReputationScoresMap (r:0 w:1)
    fn reset_reputation() -> Weight {
        (10_000_000 as Weight) // Placeholder
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    // Storage: Reputation ReputationScoresMap (r:1 w:1)
    fn initialize_reputation() -> Weight {
        (12_000_000 as Weight) // Placeholder
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn update_reputation() -> Weight {
        RocksDbWeight::get()
            .reads(1)
            .writes(1)
            .saturating_add(15_000_000)
    }
    fn reset_reputation() -> Weight {
        RocksDbWeight::get()
            .writes(1)
            .saturating_add(10_000_000)
    }
    fn initialize_reputation() -> Weight {
        RocksDbWeight::get()
            .reads(1)
            .writes(1)
            .saturating_add(12_000_000)
    }
}
