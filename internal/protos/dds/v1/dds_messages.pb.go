// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: dds_messages.proto

package ddsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message to request storing a chunk.
type StoreChunkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CID of the chunk (Base58BTC encoded SHA-256 hash).
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// The actual binary data of the chunk.
	ChunkData     []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3" json:"chunk_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreChunkRequest) Reset() {
	*x = StoreChunkRequest{}
	mi := &file_dds_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreChunkRequest) ProtoMessage() {}

func (x *StoreChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dds_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreChunkRequest.ProtoReflect.Descriptor instead.
func (*StoreChunkRequest) Descriptor() ([]byte, []int) {
	return file_dds_messages_proto_rawDescGZIP(), []int{0}
}

func (x *StoreChunkRequest) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *StoreChunkRequest) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

// Response to a StoreChunkRequest.
type StoreChunkResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates if the store operation was successful.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Optional: Error code if success is false.
	ErrorCode uint32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` // Specific error codes to be defined.
	// Optional: Error message if success is false.
	ErrorMessage  string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreChunkResponse) Reset() {
	*x = StoreChunkResponse{}
	mi := &file_dds_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreChunkResponse) ProtoMessage() {}

func (x *StoreChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dds_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreChunkResponse.ProtoReflect.Descriptor instead.
func (*StoreChunkResponse) Descriptor() ([]byte, []int) {
	return file_dds_messages_proto_rawDescGZIP(), []int{1}
}

func (x *StoreChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StoreChunkResponse) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StoreChunkResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Message to request retrieval of a chunk.
type RetrieveChunkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CID of the chunk to retrieve (Base58BTC encoded SHA-256 hash).
	Cid           string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetrieveChunkRequest) Reset() {
	*x = RetrieveChunkRequest{}
	mi := &file_dds_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveChunkRequest) ProtoMessage() {}

func (x *RetrieveChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dds_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveChunkRequest.ProtoReflect.Descriptor instead.
func (*RetrieveChunkRequest) Descriptor() ([]byte, []int) {
	return file_dds_messages_proto_rawDescGZIP(), []int{2}
}

func (x *RetrieveChunkRequest) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

// Response to a RetrieveChunkRequest.
type RetrieveChunkResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual binary data of the chunk.
	ChunkData []byte `protobuf:"bytes,1,opt,name=chunk_data,json=chunkData,proto3" json:"chunk_data,omitempty"`
	// Indicates if the retrieval was successful.
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// Optional: Error code if success is false (e.g., chunk not found).
	ErrorCode uint32 `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// Optional: Error message if success is false.
	ErrorMessage  string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetrieveChunkResponse) Reset() {
	*x = RetrieveChunkResponse{}
	mi := &file_dds_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveChunkResponse) ProtoMessage() {}

func (x *RetrieveChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dds_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveChunkResponse.ProtoReflect.Descriptor instead.
func (*RetrieveChunkResponse) Descriptor() ([]byte, []int) {
	return file_dds_messages_proto_rawDescGZIP(), []int{3}
}

func (x *RetrieveChunkResponse) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *RetrieveChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RetrieveChunkResponse) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *RetrieveChunkResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Message to find providers for a given CID.
type FindProvidersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CID for which to find providers (Base58BTC encoded SHA-256 hash).
	// This can be a manifest_cid or a chunk_cid.
	Cid           string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindProvidersRequest) Reset() {
	*x = FindProvidersRequest{}
	mi := &file_dds_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindProvidersRequest) ProtoMessage() {}

func (x *FindProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dds_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindProvidersRequest.ProtoReflect.Descriptor instead.
func (*FindProvidersRequest) Descriptor() ([]byte, []int) {
	return file_dds_messages_proto_rawDescGZIP(), []int{4}
}

func (x *FindProvidersRequest) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

// Response to a FindProvidersRequest.
type FindProvidersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of PeerIDs (as strings) that are known to provide the requested CID.
	// libp2p PeerIDs are typically Base58 encoded.
	PeerIds []string `protobuf:"bytes,1,rep,name=peer_ids,json=peerIds,proto3" json:"peer_ids,omitempty"`
	// Indicates if the query was successful (even if no providers were found).
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// Optional: Error code if the query itself failed.
	ErrorCode uint32 `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// Optional: Error message if the query failed.
	ErrorMessage  string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindProvidersResponse) Reset() {
	*x = FindProvidersResponse{}
	mi := &file_dds_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindProvidersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindProvidersResponse) ProtoMessage() {}

func (x *FindProvidersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dds_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindProvidersResponse.ProtoReflect.Descriptor instead.
func (*FindProvidersResponse) Descriptor() ([]byte, []int) {
	return file_dds_messages_proto_rawDescGZIP(), []int{5}
}

func (x *FindProvidersResponse) GetPeerIds() []string {
	if x != nil {
		return x.PeerIds
	}
	return nil
}

func (x *FindProvidersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FindProvidersResponse) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *FindProvidersResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Message to instruct another node to replicate a chunk.
type ReplicationInstruction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CID of the chunk to be replicated (Base58BTC encoded SHA-256 hash).
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Optional: Suggested source PeerID from where the target can fetch the chunk.
	// If empty, the target node should use FindProviders.
	SourcePeerIdHint string `protobuf:"bytes,2,opt,name=source_peer_id_hint,json=sourcePeerIdHint,proto3" json:"source_peer_id_hint,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ReplicationInstruction) Reset() {
	*x = ReplicationInstruction{}
	mi := &file_dds_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationInstruction) ProtoMessage() {}

func (x *ReplicationInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_dds_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationInstruction.ProtoReflect.Descriptor instead.
func (*ReplicationInstruction) Descriptor() ([]byte, []int) {
	return file_dds_messages_proto_rawDescGZIP(), []int{6}
}

func (x *ReplicationInstruction) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *ReplicationInstruction) GetSourcePeerIdHint() string {
	if x != nil {
		return x.SourcePeerIdHint
	}
	return ""
}

// Response to a ReplicationInstruction.
type ReplicationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates if the replication instruction was accepted and initiated.
	// Note: This does not guarantee completion of replication, only acknowledgement.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Optional: Error code if the instruction was rejected or failed to initiate.
	ErrorCode uint32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// Optional: Error message.
	ErrorMessage  string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationResponse) Reset() {
	*x = ReplicationResponse{}
	mi := &file_dds_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationResponse) ProtoMessage() {}

func (x *ReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dds_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationResponse.ProtoReflect.Descriptor instead.
func (*ReplicationResponse) Descriptor() ([]byte, []int) {
	return file_dds_messages_proto_rawDescGZIP(), []int{7}
}

func (x *ReplicationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReplicationResponse) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ReplicationResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_dds_messages_proto protoreflect.FileDescriptor

const file_dds_messages_proto_rawDesc = "" +
	"\n" +
	"\x12dds_messages.proto\x12\x16digisocialblock.dds.v1\"D\n" +
	"\x11StoreChunkRequest\x12\x10\n" +
	"\x03cid\x18\x01 \x01(\tR\x03cid\x12\x1d\n" +
	"\n" +
	"chunk_data\x18\x02 \x01(\fR\tchunkData\"r\n" +
	"\x12StoreChunkResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x1d\n" +
	"\n" +
	"error_code\x18\x02 \x01(\rR\terrorCode\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\"(\n" +
	"\x14RetrieveChunkRequest\x12\x10\n" +
	"\x03cid\x18\x01 \x01(\tR\x03cid\"\x94\x01\n" +
	"\x15RetrieveChunkResponse\x12\x1d\n" +
	"\n" +
	"chunk_data\x18\x01 \x01(\fR\tchunkData\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x1d\n" +
	"\n" +
	"error_code\x18\x03 \x01(\rR\terrorCode\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\"(\n" +
	"\x14FindProvidersRequest\x12\x10\n" +
	"\x03cid\x18\x01 \x01(\tR\x03cid\"\x90\x01\n" +
	"\x15FindProvidersResponse\x12\x19\n" +
	"\bpeer_ids\x18\x01 \x03(\tR\apeerIds\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x1d\n" +
	"\n" +
	"error_code\x18\x03 \x01(\rR\terrorCode\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\"Y\n" +
	"\x16ReplicationInstruction\x12\x10\n" +
	"\x03cid\x18\x01 \x01(\tR\x03cid\x12-\n" +
	"\x13source_peer_id_hint\x18\x02 \x01(\tR\x10sourcePeerIdHint\"s\n" +
	"\x13ReplicationResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x1d\n" +
	"\n" +
	"error_code\x18\x02 \x01(\rR\terrorCode\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessageBAZ?github.com/DigiSocialBlock/EchoNet/internal/protos/dds/v1;ddsv1b\x06proto3"

var (
	file_dds_messages_proto_rawDescOnce sync.Once
	file_dds_messages_proto_rawDescData []byte
)

func file_dds_messages_proto_rawDescGZIP() []byte {
	file_dds_messages_proto_rawDescOnce.Do(func() {
		file_dds_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dds_messages_proto_rawDesc), len(file_dds_messages_proto_rawDesc)))
	})
	return file_dds_messages_proto_rawDescData
}

var file_dds_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dds_messages_proto_goTypes = []any{
	(*StoreChunkRequest)(nil),      // 0: digisocialblock.dds.v1.StoreChunkRequest
	(*StoreChunkResponse)(nil),     // 1: digisocialblock.dds.v1.StoreChunkResponse
	(*RetrieveChunkRequest)(nil),   // 2: digisocialblock.dds.v1.RetrieveChunkRequest
	(*RetrieveChunkResponse)(nil),  // 3: digisocialblock.dds.v1.RetrieveChunkResponse
	(*FindProvidersRequest)(nil),   // 4: digisocialblock.dds.v1.FindProvidersRequest
	(*FindProvidersResponse)(nil),  // 5: digisocialblock.dds.v1.FindProvidersResponse
	(*ReplicationInstruction)(nil), // 6: digisocialblock.dds.v1.ReplicationInstruction
	(*ReplicationResponse)(nil),    // 7: digisocialblock.dds.v1.ReplicationResponse
}
var file_dds_messages_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dds_messages_proto_init() }
func file_dds_messages_proto_init() {
	if File_dds_messages_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dds_messages_proto_rawDesc), len(file_dds_messages_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dds_messages_proto_goTypes,
		DependencyIndexes: file_dds_messages_proto_depIdxs,
		MessageInfos:      file_dds_messages_proto_msgTypes,
	}.Build()
	File_dds_messages_proto = out.File
	file_dds_messages_proto_goTypes = nil
	file_dds_messages_proto_depIdxs = nil
}
